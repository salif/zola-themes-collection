<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>mo8it.com - julia</title>
    <subtitle>mo8it&#x27;s personal website with a technical blog about Rust, Linux, FOSS and Self-Hosting</subtitle>
    <link rel="self" type="application/atom+xml" href="data-update/mo8it/tags/julia/atom.xml"/>
    <link rel="alternate" type="text/html" href="data-update/mo8it/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-10-30T00:00:00+00:00</updated>
    <id>data-update/mo8it/tags/julia/atom.xml</id>
    <entry xml:lang="en">
        <title>Rust vs Julia in scientific computing</title>
        <published>2023-07-14T00:00:00+00:00</published>
        <updated>2024-10-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              mo8it
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="data-update/mo8it/blog/rust-vs-julia/"/>
        <id>data-update/mo8it/blog/rust-vs-julia/</id>
        
        <summary type="html">&lt;p&gt;Although the scientific domain often requires the highest performance out of programming languages, people in this domain have often preferred less efficient dynamic languages like Python for flexibility and ease of use.
At some point, a project grows out of that efficiency compromise and the software has to be rewritten in a statically-typed language like C&#x2F;C++.
This means that people in the scientific domain had to switch between two languages and often rewrite the logic that they already encoded in the first one.
This is a problem which is referred to as the &lt;em&gt;two-language problem&lt;&#x2F;em&gt;.
As an attempt to solve this problem, Julia was developed as a dynamic language that feels like Python but has performance comparable to C&#x2F;C++.&lt;&#x2F;p&gt;
&lt;p&gt;Rust is a statically-typed language that indirectly addresses the problem by improving the experience with statically typed languages instead of accelerating the runtime of dynamic ones.
Its strong type system and friendly compiler empower developers to write reliable and efficient software without the memory safety problems known from C&#x2F;C++.&lt;&#x2F;p&gt;
&lt;p&gt;After using and even teaching both languages, I will compare them and discuss whether Julia solves the two-language problem and when you should use Rust instead.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
